name: homelab

x-default-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

x-default-restart: &default-restart
  restart: unless-stopped

x-proxy-network: &proxy-network
  networks:
    - proxy

x-common-env: &common-env
  TZ: ${TZ:-UTC}

x-security-labels: &security-labels
  - "traefik.http.middlewares.secure-headers.headers.sslRedirect=true"
  - "traefik.http.middlewares.secure-headers.headers.stsSeconds=63072000"
  - "traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true"
  - "traefik.http.middlewares.secure-headers.headers.browserXssFilter=true"
  - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"

services:
  # safer access to docker api for traefik (read-only)
  socket-proxy:
    image: ${SOCKET_PROXY_IMAGE}
    <<: [*default-restart, *default-logging]
    environment:
      <<: *common-env
      LOG_LEVEL: info
      # grant only what traefik needs
      CONTAINERS: 1
      EVENTS: 1
      NETWORKS: 1
      SERVICES: 1
      TASKS: 1
      PING: 1
      VERSION: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    expose:
      - "2375"
    networks:
      - socket-proxy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2375"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles: [base]

  traefik:
    image: ${TRAEFIK_IMAGE}
    <<: [*default-restart, *default-logging, *proxy-network]
    depends_on:
      socket-proxy:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
      # Uncomment for SSH access through Traefik (useful for git over SSH)
      # - "2222:2222"
      # Uncomment to expose API locally (development only)
      # - "8080:8080"
    environment:
      <<: *common-env
      # passed through to lego for dns-01 with cloudflare
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
      # Optional: improve DNS challenge performance
      CF_ZONE_API_TOKEN: ${CF_ZONE_API_TOKEN:-}
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/acme:/letsencrypt
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - proxy
      - socket-proxy
    profiles: [base]

  # optional: cloudflare tunnel (no open ports; configure public hostnames in zero trust)
  cloudflared:
    image: ${CLOUDFLARED_IMAGE}
    <<: [*default-restart, *default-logging, *proxy-network]
    depends_on:
      traefik:
        condition: service_healthy
    command: tunnel run
    environment:
      <<: *common-env
      TUNNEL_TOKEN: ${CLOUDFLARED_TOKEN}
    profiles: [base]

  tailscale:
    image: ${TAILSCALE_IMAGE}
    <<: [*default-restart, *default-logging]
    hostname: ${TS_HOSTNAME:-homelab}
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    devices:
      - /dev/net/tun:/dev/net/tun
    network_mode: host
    environment:
      <<: *common-env
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_STATE_DIR: /var/lib/tailscale
      TS_ACCEPT_DNS: true
      TS_AUTH_ONCE: true
      # Optional: advertise routes to your local network
      TS_ROUTES: ${TS_ROUTES:-}
      TS_EXTRA_ARGS: ${TS_EXTRA_ARGS:---advertise-exit-node}
    volumes:
      - tailscale:/var/lib/tailscale
    profiles: [base, tailscale]

  portainer:
    image: ${PORTAINER_IMAGE}
    <<: [*default-restart, *default-logging, *proxy-network]
    depends_on:
      traefik:
        condition: service_healthy
    environment:
      <<: *common-env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      # Primary domain
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "traefik.http.routers.portainer.middlewares=compress@file,security-headers@file"
      # Additional domains (uncomment and configure if using DOMAIN2, DOMAIN3)
      # - "traefik.http.routers.portainer-alt.rule=Host(`portainer.${DOMAIN2:-disabled.local}`)"
      # - "traefik.http.routers.portainer-alt.entrypoints=websecure"
      # - "traefik.http.routers.portainer-alt.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.portainer-alt.middlewares=compress@file,security-headers@file"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    profiles: [base]

  whoami:
    image: ${WHOAMI_IMAGE}
    <<: [*default-restart, *default-logging, *proxy-network]
    depends_on:
      traefik:
        condition: service_healthy
    environment:
      <<: *common-env
    labels:
      - "traefik.enable=true"
      # Primary domain
      - "traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=letsencrypt"
      - "traefik.http.routers.whoami.middlewares=compress@file,security-headers@file"
      # Additional domains (uncomment and configure if using DOMAIN2, DOMAIN3)
      # - "traefik.http.routers.whoami-alt.rule=Host(`whoami.${DOMAIN2:-disabled.local}`)"
      # - "traefik.http.routers.whoami-alt.entrypoints=websecure"
      # - "traefik.http.routers.whoami-alt.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.whoami-alt.middlewares=compress@file,security-headers@file"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    profiles: [base]

networks:
  proxy:
    name: proxy
    driver: bridge
  socket-proxy:
    name: socket-proxy
    driver: bridge
    internal: true

volumes:
  portainer_data:
    driver: local
  tailscale:
    driver: local
